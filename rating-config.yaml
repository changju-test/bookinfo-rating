apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted
    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.
  workspaces:
    - name: source-dir
    - name: sonar-settings
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: ""
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
  steps:
    - name: sonar-properties-create
      image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
      workingDir: $(workspaces.source-dir.path)
      script: |
        #!/usr/bin/env bash
        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3
          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }
        if [[ -f $(workspaces.sonar-settings.path)/sonar-project.properties ]]; then
          echo "using user provided sonar-project.properties file"
          cp -RL $(workspaces.sonar-settings.path)/sonar-project.properties $(workspaces.source-dir.path)/sonar-project.properties
        fi
        if [[ -f $(workspaces.source-dir.path)/sonar-project.properties ]]; then
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi
        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
        fi
        echo "---------------------------"
        cat $(workspaces.source-dir.path)/sonar-project.properties
    - name: sonar-scan
      image: docker.io/sonarsource/sonar-scanner-cli:4.5@sha256:b8c95a37025f3c13162118cd55761ea0b2a13d1837f9deec51b7b6d82c52040a #tag: 4.5
      workingDir: $(workspaces.source-dir.path)
      command:
        - sonar-scanner
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonar-properties
data:
  sonar-project.properties: "# required metdata\nsonar.projectKey=sonar-test\nsonar.login=admin\nsonar.projectVersion=0.1\nsonar.sourceEncoding=UTF-8\n
    sonar.password=tmax@23\nsonar.sources=src/main/java/\nsonar.language=java\nsonar.java.binaries=src/main/java"
---
# tes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rating-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: cicd.tmax.io/v1
kind: IntegrationConfig
metadata:
  name: bookinfo-rating-config
spec:
  git:
    type: github
    apiUrl:
    repository: changju-test/bookinfo-rating
    token:
      valueFrom:
        secretKeyRef:
          name: cj-git-token
          key: token
  workspaces:
    - name : rating-workspace
      persistentVolumeClaim:
        claimName: rating-pvc
    - name: sonar-settings
      configMap:
        name: sonar-properties
  jobs:
    postSubmit:
      - name: copy-source
        image: docker.io/alpine:3.13.6
        script: |
          cp -r ./src $(workspaces.rating-workspace.path)/src
      - name: code-analysis
        tektonTask:
          taskRef:
            local:
              name: sonarqube-scanner
              kind: Task
          params:
            - name: SONAR_HOST_URL
              stringVal: http://sonarqube.172.22.11.16.nip.io
            - name: SONAR_PROJECT_KEY
              stringVal: rating-sonar
          workspaces:
            - name: source-dir
              workspace: rating-workspace
            - name: sonar-settings
              workspace: sonar-settings
        after:
          - copy-source
      - name: gradle-package
        image: docker.io/gradle:7.3.1-jdk11
        script: |
          gradle build
          cp build/libs/$JAR_NAME $(workspaces.rating-workspace.path)/$JAR_NAME
        env:
          - name: JAR_NAME
            value : rating.jar
      - name: build-and-push
        image: quay.io/buildah/stable
        script: |
          IMG_TAG=${CI_HEAD_REF#refs/tags/}
          cp $(workspaces.rating-workspace.path)/$JAR_NAME ./
          buildah bud --tls-verify=false --storage-driver=vfs --format docker -f Dockerfile -t $IMG_URL:dev.
          buildah login -u $HARBOR_USER -p $HARBOR_PASS
          buildah push --tls-verify=false --storage-driver=vfs $IMG_URL:$IMG_TAG docker://$IMG_URL:dev
        env:
          - name: IMG_URL
            value: docker.io/changjjjjjjjj/bookinfo-rating
          - name: JAR_NAME
            value: rating.jar
          - name: HARBOR_USER
            value: changjjjjjjjj
          - name: HARBOR_PASS
            value:
        securityContext:
          privileged: true
        after:
          - gradle-package